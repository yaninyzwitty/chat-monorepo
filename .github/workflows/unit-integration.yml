name: Go CI

on:
  push:
    branches: [main, master]
  pull_request:

env:
  GO_VERSION: stable

jobs:
  detect-modules:
    name: Detect Go Modules
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.detect.outputs.modules }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
      - id: detect
        name: Detect all Go module directories
        run: |
          modules=$(find . -name go.mod -exec dirname {} \; | jq -R -s -c 'split("\n")[:-1]')
          echo "modules=$modules" >> $GITHUB_OUTPUT

  lint:
    name: Lint
    needs: detect-modules
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: ${{ fromJSON(needs.detect-modules.outputs.modules) }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Cache golangci-lint
        uses: actions/cache@v4
        with:
          path: ~/.cache/golangci-lint
          key: golangci-lint-${{ runner.os }}-${{ matrix.module }}
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          working-directory: ${{ matrix.module }}

  build:
    name: Build
    needs: detect-modules
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: ${{ fromJSON(needs.detect-modules.outputs.modules) }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Build ${{ matrix.module }}
        working-directory: ${{ matrix.module }}
        run: go build ./...

  unit-test:
    name: Unit Tests
    needs: [detect-modules, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: ${{ fromJSON(needs.detect-modules.outputs.modules) }}
    env:
      CASSANDRA_LOCAL: "true"
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Run unit tests ${{ matrix.module }}
        working-directory: ${{ matrix.module }}
        run: go test -v -short ./...

  integration-test:
    name: Integration Tests
    needs: [detect-modules, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: ${{ fromJSON(needs.detect-modules.outputs.modules) }}
    services:
      cassandra:
        image: cassandra:4.1.3
        ports:
          - 9042:9042
        options: >-
          --health-cmd="cqlsh -e 'describe keyspaces'"
          --health-interval=10s
          --health-timeout=10s
          --health-retries=10
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Wait for Cassandra to be ready
        run: |
          echo "Waiting for Cassandra to start..."
          for i in {1..10}; do
            if docker exec $(docker ps -qf "ancestor=cassandra:4.1.3") cqlsh -e "describe keyspaces" > /dev/null 2>&1; then
              echo "Cassandra is ready"
              break
            fi
            echo "Waiting..."
            sleep 5
          done
      - name: Run integration tests ${{ matrix.module }}
        working-directory: ${{ matrix.module }}
        run: go test -v -run Integration ./...
